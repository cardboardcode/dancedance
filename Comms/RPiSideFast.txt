import serial
import RingBuffer as RB
import threading
import time
import sys
import operator
import csv

mutex = threading.Lock()

class ReceiveData(threading.Thread):
        def __init__(self, buffer, port, time0, period):
                threading.Thread.__init__(self)
                self.buffer = buffer
                self.port = port
                self.period = period
                self.time0 = time0

        def run(self):
                #Handshaking, keep saying 'H' to Arduino unitl Arduion reply 'A'
                while(self.port.in_waiting == 0 or self.port.read() != 'A'):
                        print 'Try to connect to Arduino'
                        self.port.write('H')
                        time.sleep(1)
                self.port.write('A');
                print 'Connected'
                self.time0[0] = int(round(time.time()*1000))
                self.readData()


        def readData(self):
                #start to receive data from mega
                nextTime = time.time() + self.period
                if not self.buffer.isFull():
                        rcv = self.port.read(16)
                        mutex.acquire()
                        self.buffer.append(rcv)
                        mutex.release()
                threading.Timer(nextTime - time.time(), self.readData).start()

class StoreData(threading.Thread):
        def __init__(self, port, buffer, list, _aref, _vref, _RS, _cvref, _cdivide, headers, period):
                threading.Thread.__init__(self)
                self.port = port
                self.buffer = buffer
                self.bufferSize = buffer.getSize()
                self.list = list
                self._aref = _aref            #voltage reference for accelo sensor
                self._bias = _aref/2.0
                self._mvG = _aref/10.0
                self._vref = _vref            #voltage reference for current sensor
                self.RS = _RS                 #shunt resistor value (in ohms)
                self._cvref = _cvref          #calibrated voltage reference for voltage sensor
                self._cdivide = _cdivide      #calibrated voltage divide for voltage sensor
                self.headers = headers
                self.period = period

        def run(self):
                self.nextID = 0
                self.storeData()

        def storeData(self):
                nextTime = time.time() + self.period
                mutex.acquire()
                dataList = self.buffer.get()
                mutex.release()
                if dataList:                                   #list is not empty
#                       print(len(dataList))
                        ack = False
                        for data in dataList:
#                               print(", ".join(str(d) for d in data))
                                if reduce(operator.xor, data) == 0:                         #pass checksum check
                                        ack = True                                           #ack current sample
                                        sample = ['{0:.4f}'.format(s*self._cvref/1024.0*self._cdivide) for s in data[1:2]] \
                                                        + ['{0:.4f}'.format(s*self._vref/1023.0/(10*self.RS)) for s in data[2:3]] \
                                                        + ['{0:.4f}'.format(((s<<2) * self._aref / 1024.0 - self._bias) / self._mvG) for s in data[3:-1]]
#                                       print(", ".join(sample))
                                        sampleDict = dict(zip(self.headers, sample))
                                        self.list.append(sampleDict)                                  #store the 12 reading
                                        self.nextID = (data[0] + 1)%self.bufferSize
                                else:
                                        ack = False                                                  #some samples has problem
                                        break
                        if ack:
#                               print('A'+str(self.nextID))
                                self.port.write('A')
                                self.port.write(chr(self.nextID))
                                mutex.acquire()
                                self.buffer.ack(self.nextID)
                                mutex.release()
                        else:
#                               print('N'+str(self.nextID))
                                self.port.write('N')
                                self.port.write(chr(self.nextID))
                                mutex.acquire()
                                self.buffer.nack(self.nextID)
                                mutex.release()
                threading.Timer(nextTime - time.time(), self.storeData).start()


class Raspberry():
        def __init__(self):
                self.list = []
                self.buffer = RB.RingBuffer(32)
                self._aref = 3.3
                self._vref = 5.0
                self._RS = 0.1
                self._cvref = 5.015
                self._cdivide = 11.132
                self.threads = []
                self.headers = [' Vol  ', ' Cur  ', '  X1  ', '  Y1  ', '  Z1  ', '  X2  ', '  Y2  ', '  Z2  ', '  X3  ', '  Y3  ', '  Z3  ', '  X4  ', '  Y4  ', '  Z4  ']
                self.time0 = [0]
        def main(self):
                try:
                        #set up port connection
                        self.port=serial.Serial("/dev/serial0", baudrate=115200)
                        self.port.reset_input_buffer()
                        self.port.reset_output_buffer()

                        #initialize all threads
                        commThread = ReceiveData(self.buffer, self.port, self.time0, 0.004)                           #time to send data should be a bit fast than sample rate
                        storageThread = StoreData(self.port, self.buffer, self.list, self._aref, \
                                                self._vref, self._RS, self._cvref, self._cdivide, self.headers, 0.04)    #at most comm period * bufferSize

                        self.threads.append(commThread)
                        self.threads.append(storageThread)

                        #start all thread
                        for thread in self.threads:
                                thread.daemon = True
                                thread.start()

                        #prevent program exit
                        while True:
                                time.sleep(0.001)

                except KeyboardInterrupt:
                        time1 = int(round(time.time()*1000))
                        print("time elapsed: " + str(time1-self.time0[0]))
#                       for sample in self.list:
#                               print(", ".join("%.2f"%s for s in sample))
                        print("sample size: " + str(len(self.list)))
                        file = 'data.csv'
                        f = open(file, 'w')
                        try:
                                f_csv = csv.DictWriter(f, self.headers)
                                f_csv.writeheader()
                                f_csv.writerows(self.list)
                        finally:
                                f.close()
                        sys.exit(1)



if __name__ == '__main__':
        pi = Raspberry()
        pi.main()


